module async_fifo
    #(
        SIZE = 4 : SIZE>0,
        DEPTH = 8 : DEPTH==$pow(2,$clog2(DEPTH))
    )
    (
        input wclk,
        input wrst,
        input din[SIZE],
        input wput,
        output full,
        input rclk,
        input rrst,
        output dout[SIZE],
        input rget,
        output empty
    )
    {
        const ADDR_SIZE = $clog2(DEPTH);
        
        .clk(wclk), .rst(wrst) {
            dff waddr[ADDR_SIZE];
            dff wsync[2][ADDR_SIZE];
        }
        
        .clk(rclk), .rst(rrst) {
            dff raddr[ADDR_SIZE];
            dff rsync[2][ADDR_SIZE];
        }
        
        simple_dual_ram ram(#SIZE(SIZE), #DEPTH(DEPTH));
        
        sig waddr_gray[ADDR_SIZE];
        
        sig wnext_gray[ADDR_SIZE];
        
        sig raddr_gray[ADDR_SIZE];
        
        sig wrdy,rrdy;
        
        always {
            ram.wclk = wclk;
            ram.rclk = rclk;
            ram.write_en = 0;
            waddr_gray = (waddr.q>>1)^waddr.q;
            wnext_gray = ((waddr.q+1)>>1)^(waddr.q+1);
            raddr_gray = (raddr.q>>1)^raddr.q;
            rsync.d = {rsync.q[0],waddr_gray};
            wsync.d = {wsync.q[0],raddr_gray};
            wrdy = wnext_gray!=wsync.q[1];
            rrdy = raddr_gray!=rsync.q[1];
            full = !wrdy;
            empty = !rrdy;
            ram.waddr = waddr.q;
            ram.raddr = raddr.q;
            ram.write_data = din;
            if (wput&&wrdy) {
                waddr.d = waddr.q+1;
                ram.write_en = 1;
            }
            if (rget&&rrdy) {
                raddr.d = raddr.q+1;
                ram.raddr = raddr.q+1;
            }
            dout = ram.read_data;
        }
    }
